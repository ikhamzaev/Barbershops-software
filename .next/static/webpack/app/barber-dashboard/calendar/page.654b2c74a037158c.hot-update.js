"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/barber-dashboard/calendar/page",{

/***/ "(app-pages-browser)/./src/lib/booking.ts":
/*!****************************!*\
  !*** ./src/lib/booking.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bookAppointment: function() { return /* binding */ bookAppointment; },\n/* harmony export */   cancelAppointment: function() { return /* binding */ cancelAppointment; },\n/* harmony export */   getAppointmentsByBarber: function() { return /* binding */ getAppointmentsByBarber; },\n/* harmony export */   getAppointmentsByClient: function() { return /* binding */ getAppointmentsByClient; },\n/* harmony export */   subscribeToAppointments: function() { return /* binding */ subscribeToAppointments; }\n/* harmony export */ });\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseClient */ \"(app-pages-browser)/./src/lib/supabaseClient.ts\");\n\nasync function bookAppointment(slot, clientId) {\n    const appointmentDate = new Date(slot.start_time).toISOString().split(\"T\")[0];\n    const appointmentTime = new Date(slot.start_time).toLocaleTimeString(\"en-US\", {\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    });\n    // Fetch client name and email from users table\n    const { data: user, error: userError } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"name, email\").eq(\"id\", clientId).single();\n    if (userError || !user) {\n        throw new Error(\"Could not fetch client info\");\n    }\n    console.log(\"Booking appointment:\", {\n        date: appointmentDate,\n        time: appointmentTime,\n        barberId: slot.barber_id,\n        clientId: clientId,\n        clientName: user.name,\n        clientEmail: user.email\n    });\n    const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"appointments\").insert([\n        {\n            barber_id: slot.barber_id,\n            client_id: clientId,\n            client_name: user.name,\n            client_email: user.email,\n            barbershop_id: slot.barbershop_id,\n            service_id: slot.service_id || null,\n            appointment_date: appointmentDate,\n            appointment_time: appointmentTime,\n            status: \"booked\",\n            notes: slot.notes || null\n        }\n    ]).select(\"\\n            *,\\n            barbers:barber_id (\\n                id,\\n                name,\\n                photo_url\\n            ),\\n            barbershops:barbershop_id (\\n                id,\\n                name,\\n                address\\n            ),\\n            services:service_id (\\n                id,\\n                name,\\n                price\\n            )\\n        \").single();\n    if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n    }\n    return data;\n}\nasync function getAppointmentsByBarber(barberId, date) {\n    console.log(\"Fetching appointments for barber:\", barberId, \"on date:\", date);\n    const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"appointments\").select(\"\\n            *,\\n            barbers:barber_id (\\n                id,\\n                name,\\n                photo_url\\n            ),\\n            barbershops:barbershop_id (\\n                id,\\n                name,\\n                address\\n            ),\\n            client:client_id (\\n                id,\\n                name,\\n                phone\\n            )\\n        \").eq(\"barber_id\", barberId).eq(\"appointment_date\", date).order(\"appointment_time\");\n    if (error) {\n        console.error(\"Error fetching appointments:\", error);\n        throw error;\n    }\n    console.log(\"Fetched appointments:\", data);\n    return data || [];\n}\nasync function getAppointmentsByClient(clientId) {\n    const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"appointments\").select(\"\\n            *,\\n            services,\\n            barbers:barber_id (\\n                id,\\n                name,\\n                photo_url\\n            ),\\n            barbershops:barbershop_id (\\n                id,\\n                name,\\n                address\\n            )\\n        \").eq(\"client_id\", clientId).order(\"appointment_date\", {\n        ascending: false\n    }).order(\"appointment_time\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\nasync function cancelAppointment(appointmentId) {\n    const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"appointments\").update({\n        status: \"cancelled\"\n    }).eq(\"id\", appointmentId);\n    if (error) throw error;\n}\nfunction subscribeToAppointments(barberId, onAppointmentChange) {\n    const channel = _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.channel(\"appointments\").on(\"postgres_changes\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"appointments\",\n        filter: \"barber_id=eq.\".concat(barberId)\n    }, (payload)=>{\n        onAppointmentChange(payload.new);\n    }).subscribe();\n    return ()=>{\n        _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.removeChannel(channel);\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/booking.ts\n"));

/***/ })

});